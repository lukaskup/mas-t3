import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import styles from "../../styles/Home.module.css";
import type { OrderFormValues } from "../../models/order";
import { Button, Col, Form, Modal, Row, Table } from "react-bootstrap";
import Link from "next/link";
import { PaymentType } from "../../models/payment";
import type { IPhysical, IService } from "../../models/product";
import type { IClient } from "../../models/person";

const AddOrder: NextPage = () => {
  const [isOrdersLoading, setOrdersLoading] = useState(true);

  const [isInvoice, setIsInvoice] = useState(false);
  const [isProductsModalOpen, setIsProductsModalOpen] = useState(false);
  const [products, setProducts] = useState<(IPhysical | IService)[]>([]);
  const [clients, setClients] = useState<IClient[]>([]);

  const defaultValues: OrderFormValues = {
    description: "",
    payment: {
      type: PaymentType.online,
      invoiceNipNumber: "",
    },
    products: [],
    client: clients[0],
  };
  const [formValues, setFormValues] = useState(defaultValues);

  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    setFormValues({
      ...formValues,
      // @ts-ignore
      [name]: value,
    });
  };

  const handlePaymentInfoChange = (e: any) => {
    const { name, value } = e.target;
    setFormValues({
      ...formValues,
      payment: { ...formValues.payment, [name]: value },
    });
  };

  const handleClientChange = (e: any) => {
    const { value } = e.target;
    const newClient = clients.find((client) => client.email === value);
    if (newClient) {
      setFormValues({
        ...formValues,
        client: newClient,
      });
    }
  };

  const handleAddProduct = (product: any) => {
    if (typeof product.qty !== "undefined") {
      product.qty = 1;
    }
    setFormValues({
      ...formValues,
      products: [...formValues.products, product],
    });
    setIsProductsModalOpen(false);
  };

  const handleDeleteProduct = (productId: string) => {
    setFormValues({
      ...formValues,
      products: formValues.products.filter(
        (product) => product.id !== productId
      ),
    });
  };

  const handleProductQtyChange = (product: any, qty: number) => {
    const newProduct: any = formValues.products.find(
      (formValuesProduct) => formValuesProduct.id === product.id
    );
    if (newProduct) {
      newProduct.qty = qty;
      const newProducts = formValues.products.filter(
        (formValuesProduct) => formValuesProduct.id !== product.id
      );
      newProducts.push(newProduct);
      setProducts(newProducts);
    }
  };

  const handleSubmit = (event: any) => {
    event.preventDefault();
    if (!isInvoice) {
      delete formValues.payment.invoiceNipNumber;
    }
  };

  useEffect(() => {
    // const productsQuery = db.collection("products").get();
    // const clientsQuery = db.collection("persons").get();
    // Promise.all([productsQuery, clientsQuery]).then((snapshots) => {
    //   const productsSnapshot = snapshots[0];
    //   const clientsSnapshot = snapshots[1];
    //   const dbProducts: (IService | IPhysical)[] = [];
    //   productsSnapshot.forEach((doc: any) => {
    //     const dbProduct: IService | IPhysical = doc.data();
    //     dbProducts.push(dbProduct);
    //   });
    //   setProducts(dbProducts);
    //   const dbClients: IClient[] = [];
    //   clientsSnapshot.forEach((doc: any) => {
    //     const dbClient: IClient = doc.data();
    //     dbClients.push(dbClient);
    //   });
    //   setClients(dbClients);
    //   defaultValues.client = dbClients[0];
    // });
  }, []);

  return (
    <div className={styles.container} style={{ marginTop: "40px" }}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row>
        <Col>
          <Link href={"/orders"}>
            <Button
              className="float-start"
              style={{ transform: "translateY(5px)" }}
            >
              Back
            </Button>
          </Link>
          <h1 className="float-start mb-5" style={{ marginLeft: "10px" }}>
            Add order
          </h1>
        </Col>
      </Row>
      <Form>
        <Row>
          <Col xs={12} md={4}>
            <Row>
              <Col>
                <h2 className="float-start">Order info</h2>
              </Col>
            </Row>
            <Row>
              <Col>
                <Form.Group className="mb-4">
                  <Form.Label>Client</Form.Label>
                  <Form.Select placeholder="=Choose client">
                    {clients.map((client: IClient) => (
                      <option
                        key={`client-${client.id}`}
                        // defaultValue={formValues.client?.email === client.email}
                        value={formValues.client?.email}
                        onChange={handleClientChange}
                      >
                        {client.email}
                      </option>
                    ))}
                  </Form.Select>
                </Form.Group>
              </Col>
            </Row>
            <Row>
              <Col>
                <Form.Group className="mb-4">
                  <Form.Label>Description</Form.Label>
                  <Form.Control
                    type="text"
                    placeholder="Enter description"
                    name="description"
                    onChange={handleInputChange}
                  />
                </Form.Group>
              </Col>
            </Row>
            <Row>
              <Col>
                <h2 className="float-start">Payment info</h2>
              </Col>
            </Row>
            <Form.Group className="mb-4">
              <Form.Label>Type</Form.Label>
              <Form.Select
                placeholder="Enter payment type  "
                name="type"
                onChange={handlePaymentInfoChange}
              >
                {Object.keys(PaymentType).map((value: string) => (
                  <option key={value}>{value}</option>
                ))}
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-4">
              <Form.Check
                type="switch"
                id="custom-switch"
                className="mt-3"
                label="Invoice"
                checked={isInvoice}
                onChange={() => setIsInvoice(!isInvoice)}
              />
            </Form.Group>
            {isInvoice && (
              <Row>
                <Col>
                  <Row>
                    <Col>
                      <h2 className="float-start">Invoice info</h2>
                    </Col>
                  </Row>
                  <Form.Group className="mb-4">
                    <Form.Group className="mb-4">
                      <Form.Label>Nip</Form.Label>
                      <Form.Control
                        type="number"
                        max={11}
                        placeholder="Enter nip number"
                        name="invoiceNipNumber"
                        onChange={handlePaymentInfoChange}
                        value={formValues.payment.invoiceNipNumber}
                      />
                    </Form.Group>
                  </Form.Group>
                </Col>
              </Row>
            )}
          </Col>
          <Col>
            <Row>
              <Col>
                <h2 className="float-start">Products list</h2>
              </Col>
            </Row>
            <Row>
              <Col>
                <Table striped bordered hover>
                  <thead>
                    <tr>
                      <th>name</th>
                      <th>price</th>
                      <th>qty/availability</th>
                      <th>actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {formValues.products.map((product: any, i: number) => {
                      return (
                        <tr key={`cart-product-${product.id}-${i}`}>
                          <td>{product.name}</td>
                          <td>{product.price}</td>
                          <td>
                            {product.qty ? (
                              <Form.Control
                                type="number"
                                value={product.qty}
                                name="qty"
                                style={{ maxWidth: "100px" }}
                                onChange={(e: any) => {
                                  handleProductQtyChange(
                                    product,
                                    e.target.value
                                  );
                                }}
                              />
                            ) : product.available ? (
                              "available"
                            ) : (
                              "not available"
                            )}
                          </td>
                          <td>
                            <Button
                              variant="primary"
                              onClick={() => {
                                handleDeleteProduct(product);
                              }}
                            >
                              Remove
                            </Button>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </Table>
                {formValues.products.length > 0 && (
                  <Row>
                    <Col>
                      <h2>
                        Sum:{" "}
                        {formValues.products
                          .map((product: any) =>
                            typeof product.qty !== "undefined"
                              ? product.price * product.qty
                              : product.price
                          )
                          .reduce((a, b) => a + b, 0)
                          .toFixed(2)}{" "}
                        PLN
                      </h2>
                    </Col>
                  </Row>
                )}
                {formValues.products.length === 0 && (
                  <h5 className="mt-2 text-center">Add products</h5>
                )}
              </Col>
            </Row>
            <Row>
              <Col xs={{ span: 2, offset: 5 }}>
                <Button
                  variant="primary"
                  style={{ width: "100%" }}
                  onClick={() => setIsProductsModalOpen(true)}
                >
                  +
                </Button>
              </Col>
            </Row>
          </Col>
        </Row>
        <Button variant="primary" onClick={handleSubmit}>
          Submit
        </Button>
      </Form>

      <Modal
        show={isProductsModalOpen}
        onHide={() => setIsProductsModalOpen(false)}
      >
        <Modal.Header closeButton>
          <Modal.Title>Products</Modal.Title>
        </Modal.Header>
        <Modal.Body style={{ padding: "0" }}>
          <Table striped bordered hover style={{ marginBottom: "0" }}>
            <thead>
              <tr>
                <th>name</th>
                <th>price</th>
                <th>qty/availability</th>
              </tr>
            </thead>
            <tbody>
              {products.map((product: any) => {
                const notAvailable =
                  (typeof product.qty !== "undefined" && product.qty === 0) ||
                  (typeof product.available !== "undefined" &&
                    !product.available);
                return (
                  <tr
                    key={`product-${product.id}`}
                    style={{
                      cursor: !notAvailable ? "pointer" : "not-allowed",
                    }}
                    onClick={() => {
                      handleAddProduct(product);
                    }}
                  >
                    <td>{product.name}</td>
                    <td>{product.price} PLN</td>
                    <td>
                      {product.qty
                        ? product.qty
                        : product.available
                        ? "available"
                        : "not available"}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default AddOrder;
