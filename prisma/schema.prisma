// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//mas

model Payment {
  id        String   @id @default(cuid())
  number    String
  completed Boolean
  type      String
  invoiceId String?  @unique
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  orderId   String?  @unique
  order     Order?   @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String   @id @default(cuid())
  number    String
  nip       String
  paymentId String
  payment   Payment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id                    String   @id @default(cuid())
  firstname             String
  lastname              String
  phoneNumber           String
  type                  String
  email                 String?  @unique
  address               String?
  pesel                 String?
  position              String?
  wage                  Float?
  deliveryAddress       String?
  correspondenceAddress String?
  education             String?
  incomingMeetings      String[]
  courses               String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Order {
  id          String         @id @default(cuid())
  price       Float
  description String
  status      String
  completedAt DateTime?
  payment     Payment?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  products    ProductOrder[]
  delivery    Delivery?
  return      Return?
}

model Discount {
  id           String    @id @default(cuid())
  name         String
  percentValue Float
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Product      Product[]
}

model Product {
  id         String         @id @default(cuid())
  name       String
  price      Float
  type       String
  parameters String[]
  category   Category?      @relation(fields: [categoryId], references: [id])
  orders     ProductOrder[]
  discountId String?
  discount   Discount?      @relation(fields: [discountId], references: [id])
  supplierId String?
  supplier   Supplier?      @relation(fields: [supplierId], references: [id])
  stocks     Stock[]
  categoryId String?
}

model ProductOrder {
  id        String   @id @default(cuid())
  productId String
  orderId   String
  product   Product? @relation(fields: [productId], references: [id])
  order     Order?   @relation(fields: [orderId], references: [id])
  qty       Int
}

model Supplier {
  id        String    @id @default(cuid())
  name      String
  address   String
  email     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Warehouse {
  id        String   @id @default(cuid())
  name      String
  location  String
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    Stock[]
}

model Stock {
  id          String    @id @default(cuid())
  productId   String
  warehouseId String
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Delivery {
  id          String   @id @default(cuid())
  orderId     String   @unique
  employeeId  String
  deliveredAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id])
}

model Return {
  id          String    @id @default(cuid())
  orderId     String    @unique
  reason      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id])
}