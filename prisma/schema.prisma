// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//mas

model Payment {
  id        String   @id @default(cuid())
  number    String
  completed Boolean
  type      String
  invoiceId String?   @unique
  invoice   Invoice?  @relation(fields: [invoiceId], references: [id])
  orderId   String?   @unique
  order     Order?    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id        String   @id @default(cuid())
  number    String
  nip       String
  paymentId String
  payment   Payment?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String    @id @default(cuid())
  price       Float
  description String
  status      String
  completedAt DateTime?
  payment     Payment?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Person {
  id                    String   @id @default(cuid())
  firstname             String
  lastname              String
  phoneNumber           String
  type                  String
  email                 String?  @unique
  address               String?
  pesel                 String?
  position              String?
  wage                  Float?
  deliveryAddress       String?
  correspondenceAddress String?
  education             String?
  incomingMeetings      String[]
  courses               String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Product {
  id                String   @id @default(cuid())
  name              String
  price             Float
  type              String
  parameters        String[]
  category          String?
  qty               Int?
  avgTimeToComplete Int?
  available         Boolean?
}
